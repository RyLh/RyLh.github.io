<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HOO的记事本</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hooo.win/"/>
  <updated>2020-08-02T10:22:50.000Z</updated>
  <id>http://hooo.win/</id>
  
  <author>
    <name>Hoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建FreshRSS</title>
    <link href="http://hooo.win/2020/08/02/%E6%90%AD%E5%BB%BAFreshRSS/"/>
    <id>http://hooo.win/2020/08/02/%E6%90%AD%E5%BB%BAFreshRSS/</id>
    <published>2020-08-02T10:22:50.000Z</published>
    <updated>2020-08-02T10:22:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直都是RSS阅读的重度依赖者，由于懒，所以都是选择使用Inoreader、Feedly之类的平台进行订阅阅读，但是由于各式各样的原因，不得不让我放弃它们开始折腾自建。</p><p>目前自建使用比较多的应该是Tiny Tiny RSS、Miniflux和FreshRSS这三款，三者中用的最多的应该TTRSS，因为它功能最齐全。但是配置复杂，页面加载慢等等问题让我最终还是选择了FreshRSS，页面清爽加载也快，我需要的都能满足。</p><h2 id="FreshRSS"><a href="#FreshRSS" class="headerlink" title="FreshRSS"></a>FreshRSS</h2><p>由于之前搭图床时用的就是caddy+php7.4+mariadb，所有部署起来也方便，直接建多个数据库和用户，然后修改增加caddy的Caddyfile文件即可。</p><p>官网地址：<a href="https://freshrss.org/">https://freshrss.org/</a></p><p>项目地址：<a href="https://github.com/FreshRSS/FreshRSS">https://github.com/FreshRSS/FreshRSS</a></p><h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><p><img src="https://cdn.jsdelivr.net/gh/RyLh/imghosting@latest/2020/08/02/56b832ff7a59b7e6d0594631d4e1a58c.png"></p><p>另外没有提到，需要Fileinfo扩展。详情：<a href="https://freshrss.org/#requirements">https://freshrss.org/#requirements</a></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>创建目录</p><pre><code class="hljs bash">mkdir -p /usr/share/rss</code></pre><p>进入目录</p><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/rss</code></pre><p>下载FreshRSS</p><pre><code class="hljs bash">wget https://github.com/FreshRSS/FreshRSS/archive/master.zip</code></pre><p>安装解压</p><pre><code class="hljs bash">apt-get install unzip</code></pre><p>解压FreshRSS</p><pre><code class="hljs bash">unzip master.zip</code></pre><p>复制FreshRSS到本目录</p><pre><code class="hljs bash">cp -R FreshRSS-master/* .</code></pre><p>删除压缩包</p><pre><code class="hljs bash">rm -f master.zip</code></pre><p>删除解压目录</p><pre><code class="hljs bash">rm -rf FreshRSS-master/</code></pre><p>指定用户组并更改data目录权限</p><pre><code class="hljs bash">chown -R www-data:www-data . &amp;&amp; chmod -R g+r . &amp;&amp; chmod -R g+w ./data/</code></pre><p>更改本目录权限</p><pre><code class="hljs bash">chmod -R g+w .</code></pre><p>链接到WEB服务目录</p><pre><code class="hljs bash">ln -s /usr/share/rss/p/ /var/www/rss</code></pre><h3 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h3><p>用ROOT用户登录mysql，密码9981</p><pre><code class="hljs bash">mysql -uroot -p9981</code></pre><p>创建rss数据库</p><pre><code class="hljs mysql">create database rss;</code></pre><p>创建用户xxx密码123456</p><pre><code class="hljs mysql">create user &#39;xxx&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</code></pre><p>授权</p><pre><code class="hljs mysql">grant all on rss.* to &#39;xxx&#39;@&#39;localhost&#39;;</code></pre><p>刷新</p><pre><code class="hljs mysql">flush privileges;</code></pre><p>退出</p><pre><code class="hljs mysql">exit</code></pre><h3 id="配置Caddyfile文件"><a href="#配置Caddyfile文件" class="headerlink" title="配置Caddyfile文件"></a>配置Caddyfile文件</h3><pre><code class="hljs conf">rss.hooo.win &#123;  gzip  root &#x2F;var&#x2F;www&#x2F;rss  tls biuboom@mail.ru  fastcgi &#x2F; &#x2F;run&#x2F;php&#x2F;php7.4-fpm.sock php &#123;      env PATH &#x2F; bin    ext .php    split .php    index index.php  &#125;&#125;</code></pre><p>打开网站填写资料安装。</p><h3 id="自动更新RSS"><a href="#自动更新RSS" class="headerlink" title="自动更新RSS"></a>自动更新RSS</h3><p>创建编辑定时任务</p><pre><code class="hljs bash">vim /etc/cron.d/FreshRSS</code></pre><p>按i输入以下内容（每半小时运行一次）</p><pre><code class="hljs vim"><span class="hljs-number">0</span>,<span class="hljs-number">30</span> * * * * www-data php -<span class="hljs-keyword">f</span> /usr/share/rss/app/actualize_script.php &gt; /tmp/FreshRSS.<span class="hljs-built_in">log</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span></code></pre><p>按Esc，输入*:wq*保存退出。</p><p>注意：输完内容后必须再加多一个换行符，不要用在windows下编辑文件，因为会出现换行符不兼容问题。</p><p>开启cron定时任务</p><pre><code class="hljs bash">/etc/init.d/cron start</code></pre><h3 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h3><p>在后台扩展处有详细扩展说明，默认没有安装。需要自己下载扩展包，解压放置/rss/extensions 目录中即可。注意权限更改。返回网页可以直接管理。</p><p>推荐开启：Fixed Nav Menu、Image Proxy、Mobile Scroll Menu、Touch Control</p><h3 id="手机访问"><a href="#手机访问" class="headerlink" title="手机访问"></a>手机访问</h3><p>实际上开启扩展后在手机上访问感觉挺不错，不过也可以配合FeedMe来使用</p><p>在”认证”处勾选“允许API访问”</p><p>在“用户账户”处输入API密码，下方有API调用说明</p><p>手机下载FeedMe</p><p>域名：https://域名/api/greader.php</p><p>输入账户密码即可</p><h3 id="开启crontab日志"><a href="#开启crontab日志" class="headerlink" title="开启crontab日志"></a>开启crontab日志</h3><pre><code class="hljs bash">vi /etc/rsyslog.conf</code></pre><p>找到</p><pre><code class="hljs conf">#cron.*           &#x2F;var&#x2F;log&#x2F;cron.log</code></pre><p>删除#注释并保存</p><pre><code class="hljs bash">service rsyslog restartservice cron restart</code></pre><p>重启服务</p><h3 id="顺手给hexo加个RSS"><a href="#顺手给hexo加个RSS" class="headerlink" title="顺手给hexo加个RSS"></a>顺手给hexo加个RSS</h3><h4 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h4><p>进入hexo目录，打开git bash。输入命令安装插件</p><pre><code class="hljs bash">npm install hexo-generator-feed</code></pre><h4 id="2、添加配置"><a href="#2、添加配置" class="headerlink" title="2、添加配置"></a>2、添加配置</h4><p>打开hexo目录下的_config.yml文件中，添加以下内容。</p><pre><code class="hljs conf">#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:type: atompath: atom.xmllimit: 20</code></pre><h4 id="3、添加主题配置"><a href="#3、添加主题配置" class="headerlink" title="3、添加主题配置"></a>3、添加主题配置</h4><p>打开主题目录下的_config.yml目录下，添加以下内容。</p><pre><code class="hljs conf">rss: &#x2F;atom.xml</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code class="hljs tex">service cron restart//重启服务service cron status//crontab服务状态service cron stop//停止服务service cron start//启动服务service crond reload //重新载入配置tail /var/log/cron.log//记录crontab服务日志tail /var/log/messages//仅包含一般的非关键消息。类别是info，notice和warntail /var/log/syslog//包含auth类型以外的所有消息 tail /tmp/FreshRSS.log//FreshRSS输出日志</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直都是RSS阅读的重度依赖者，由于懒，所以都是选择使用Inoreader、Feedly之类的平台进行订阅阅读，但是由于各式各样的原因，不得不让我放弃它们开始折腾自建。&lt;/p&gt;
&lt;p&gt;目前自建使用比较多的应该是Tiny Tiny RSS、Miniflux和FreshRSS这
      
    
    </summary>
    
    
      <category term="记录" scheme="http://hooo.win/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="FreshRSS" scheme="http://hooo.win/tags/FreshRSS/"/>
    
  </entry>
  
  <entry>
    <title>搭建jsDelivr+Github图床</title>
    <link href="http://hooo.win/2020/07/27/%E6%90%AD%E5%BB%BAjsDelivr-Github%E5%9B%BE%E5%BA%8A/"/>
    <id>http://hooo.win/2020/07/27/%E6%90%AD%E5%BB%BAjsDelivr-Github%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-07-27T11:26:50.000Z</published>
    <updated>2020-07-27T11:26:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>发现好多人用Github+jsDelivr来搭建图床。然后就跟风搭了一个，顺便记录下。</p><p>项目地址：<a href="https://github.com/yumusb/autoPicCdn">https://github.com/yumusb/autoPicCdn</a></p><p>先创建一个仓库用于存放图片<br>把项目下下来后，更改up.php的配置信息。填上用户名、仓库名以及Token（repo：Full control of private repositories 和write:packages前打勾）。填上数据库名、用户名、密码等信息；背景图可以在mystyle.css处修改。</p><p><a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>准备好后开始搭建环境</p><p>因为已装有caddy，所以装个PHP7.4+Mysqal就好。</p><h2 id="安装PHP7-4"><a href="#安装PHP7-4" class="headerlink" title="安装PHP7.4"></a>安装PHP7.4</h2><p>安装apt-transport-https</p><pre><code class="hljs bash">apt-get install apt-transport-https lsb-release ca-certificates</code></pre><p>安装Key</p><pre><code class="hljs bash">wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg</code></pre><p>添加源</p><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb https://packages.sury.org/php/ <span class="hljs-subst">$(lsb_release -sc)</span> main&quot;</span> &gt; /etc/apt/sources.list.d/php.list</code></pre><pre><code class="hljs bash">apt-get update</code></pre><p>安装PHP74</p><pre><code class="hljs bash">apt install php7.4-fpm php7.4-mysql php7.4-curl php7.4-gd php7.4-mbstring php7.4-xml php7.4-xmlrpc php7.4-zip php7.4-opcache php7.4-sqlite3 php7.4-cgi php7.4-cli php7.4-json php7.4-imap php7.4-intl php7.4-imagick  -y</code></pre><p>关闭fix_pathinfo</p><pre><code class="hljs bash">sed -i <span class="hljs-string">&#x27;s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/&#x27;</span> /etc/php/7.4/cgi/php.ini</code></pre><h3 id="设置自启动"><a href="#设置自启动" class="headerlink" title="设置自启动"></a>设置自启动</h3><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> php7.4-fpm</code></pre><h2 id="安装mariadb（MySQL）"><a href="#安装mariadb（MySQL）" class="headerlink" title="安装mariadb（MySQL）"></a>安装mariadb（MySQL）</h2><p>系统默认使用mariabd代替mysql，两者命令一样。</p><pre><code class="hljs bash">apt install mysql-server -y</code></pre><h3 id="设置MySQL"><a href="#设置MySQL" class="headerlink" title="设置MySQL"></a>设置MySQL</h3><p>登录MySQL</p><pre><code class="hljs bash">mysql -u root</code></pre><p>删除root账号</p><pre><code class="hljs mysql">drop user &#39;root&#39;@&#39;localhost&#39;;</code></pre><p>新建root账号，并设密码：9981</p><pre><code class="hljs mysql">create user &#39;root&#39;@&#39;%&#39; identified by &#39;9981&#39;;</code></pre><p>给root账号授权</p><pre><code class="hljs mysql">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; with grant option;</code></pre><p>创建imghosting数据库</p><pre><code class="hljs mysql">create database imghosting;</code></pre><p>创建imghosting数据库的用户：abc、密码：123456，并授权</p><pre><code class="hljs mysql">grant all on imghosting.* to abc@localhost identified by &quot;123456&quot;;</code></pre><p>使上述配置生效</p><pre><code class="hljs mysql">flush privileges;</code></pre><p>退出</p><pre><code class="hljs mysql">exit</code></pre><h3 id="导入MySQL"><a href="#导入MySQL" class="headerlink" title="导入MySQL"></a>导入MySQL</h3><p>创建目录，把项目上传到img目录</p><pre><code class="hljs bash">mkdir -p /var/www/img<span class="hljs-built_in">cd</span>  /var/www/imgchown -R www-data:www-data /var/www/img</code></pre><p>导入数据</p><pre><code class="hljs bash">mysql -uabc -p123456 imghosting &lt; pic.sql</code></pre><p>//mysql -u用户名 -p密码 数据库名 &lt; pic.sql</p><h3 id="设置自启动-1"><a href="#设置自启动-1" class="headerlink" title="设置自启动"></a>设置自启动</h3><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> mariadb</code></pre><h2 id="配置Caddyfile文件"><a href="#配置Caddyfile文件" class="headerlink" title="配置Caddyfile文件"></a>配置Caddyfile文件</h2><pre><code class="hljs Text">img.hooo.win &#123;  gzip  root /var/www/img  tls 123@gmail.com  fastcgi / /run/php/php7.4-fpm.sock php &#123;      env PATH / bin    ext .php    split .php    index index.php  &#125;&#125;</code></pre><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>重启下MySQL、PHP和Caddy</p><pre><code class="hljs bash">systemctl restart mysqlsystemctl restart php7.4-fpmsystemctl restart caddy</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> caddysystemctl <span class="hljs-built_in">enable</span> php7.4-fpmsystemctl <span class="hljs-built_in">enable</span> mariadb//设置自启动systemctl restart php7.4-fpm //重启phpsystemctl start php7.4-fpm //启动phpsystemctl stop php7.4-fpm //停止phpsystemctl status php7.4-fpm //php状态systemctl start caddy//启动Caddysystemctl stop caddy//停止Caddysystemctl restart caddy//重启Caddysystemctl status caddy//Caddy状态systemctl start mysql//启动mysqlsystemctl stop mysql//停止mysqlsystemctl restart mysql//重启mysqlsystemctl status mysql//mysql状态</code></pre><h2 id="利用PicGo方便本地使用"><a href="#利用PicGo方便本地使用" class="headerlink" title="利用PicGo方便本地使用"></a>利用PicGo方便本地使用</h2><p>项目地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><h3 id="PicGo设置"><a href="#PicGo设置" class="headerlink" title="PicGo设置"></a>PicGo设置</h3><p>在插件设置中搜索“web-uploader”</p><p>安装后在图床设置里找到“自定义Web图床”</p><pre><code class="hljs text">API地址：填写up.php地址POST参数名：picJSON路径：data.url</code></pre><p>PicGo本身就支持GIthub图床其实想想也没必要这样调用,</p><p>直接在图床设置里找到“Github图床“</p><pre><code class="hljs text">仓库名：用户名/imghosting分支名：masterToken:填写Token路径：picgo/                //可以建一个picgo目录用来区分开跟网页上传的不同自定义域名：https://cdn.jsdelivr.net/gh/用户名/仓库名@master</code></pre><h2 id="关于jsDelivr"><a href="#关于jsDelivr" class="headerlink" title="关于jsDelivr"></a>关于jsDelivr</h2><p> 通过jsDelivr引用资源 </p><p>使用方法：<a href="https://link.zhihu.com/?target=https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>你的用户名/你的仓库名@发布的版本号/文件路径</p><p>比如：<a href="https://cdn.jsdelivr.net/gh/aaa/myjs@1.0/01.js">https://cdn.jsdelivr.net/gh/aaa/myjs@1.0/01.js</a></p><p>版本号并不是必需的，只是为了区分开新旧资源，如果不使用版本号，将会直接引用最新资源，</p><p>比如：<a href="https://cdn.jsdelivr.net/gh/aaa/myjs/01.js">https://cdn.jsdelivr.net/gh/aaa/myjs/01.js</a></p><p>除此之外还可以使用某个范围内的版本，查看所有资源等</p><pre><code class="hljs text">// 加载任何Github发布、提交或分支https://cdn.jsdelivr.net/gh/user/repo@version/file// 加载 jQuery v3.2.1https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js// 使用版本范围而不是特定版本https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js// 完全省略该版本以获取最新版本https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js// 在末尾添加 / 以获取资源目录列表https://cdn.jsdelivr.net/gh/jquery/jquery/</code></pre><p>似乎没了。`</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现好多人用Github+jsDelivr来搭建图床。然后就跟风搭了一个，顺便记录下。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/yumusb/autoPicCdn&quot;&gt;https://github.com/yumusb/autoPicC
      
    
    </summary>
    
    
      <category term="记录" scheme="http://hooo.win/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="jsDelivr" scheme="http://hooo.win/tags/jsDelivr/"/>
    
      <category term="图床" scheme="http://hooo.win/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="caddy" scheme="http://hooo.win/tags/caddy/"/>
    
      <category term="php" scheme="http://hooo.win/tags/php/"/>
    
      <category term="mysql" scheme="http://hooo.win/tags/mysql/"/>
    
      <category term="picgo" scheme="http://hooo.win/tags/picgo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hooo.win/2020/07/16/hello-world/"/>
    <id>http://hooo.win/2020/07/16/hello-world/</id>
    <published>2020-07-15T19:27:00.000Z</published>
    <updated>2020-07-15T23:05:15.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你好，世界！"><a href="#你好，世界！" class="headerlink" title="你好，世界！"></a>你好，世界！</h2><p>折腾了一天，终于大致上弄好了。<br>好像已经很多年没有写西，删了又建，建了又删。想记录点什么又不太想记录点什么，想记得些什么却又想忘却些什么？<br>这两年整个世界都在变化，谁也不知道明天的世界会是怎么样。还是试着自娱自乐的记录些什么吧。<br><strong>世界，你还好吗？</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;你好，世界！&quot;&gt;&lt;a href=&quot;#你好，世界！&quot; class=&quot;headerlink&quot; title=&quot;你好，世界！&quot;&gt;&lt;/a&gt;你好，世界！&lt;/h2&gt;&lt;p&gt;折腾了一天，终于大致上弄好了。&lt;br&gt;好像已经很多年没有写西，删了又建，建了又删。想记录点什么又不太想记录点
      
    
    </summary>
    
    
      <category term="心情" scheme="http://hooo.win/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情" scheme="http://hooo.win/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="吐嘈" scheme="http://hooo.win/tags/%E5%90%90%E5%98%88/"/>
    
  </entry>
  
</feed>
